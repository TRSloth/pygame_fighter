Please <s>strikethrough</s> stuff that have already been done I'm a bit tired to do this right-now but figure we should probably keep track


2.1 Gamecharacteristics [5%of the grade]
  – The program implements an action game where the player controls a sprite (e.g., a character) that fights against the computer. 
  – The player has a limited number of lives (three is a good number). 
  – There is a realtime score mechanism.
  
2.2 Userinterface [5%of the grade] 
  – The program displays a welcome screen when it starts. – Whenthelivesgotozero,thewelcomescreenreappearsandallthegamespritesarecleared.   – While the welcome screen is being displayed the game mechanism is stopped. 
  – When the welcome screen is clicked, the lives and the score are reset. 
  – The program displays on the canvas an appropriate text for both the lives and the score.
  
2.3 Playersprite [10%of the grade] 
  – The player controls an animated sprite. 
  – The sprite animation depends on the control (e.g., a character can me moving to the left or to the right, and the animation should reflect this).
  
2.4 Vectors [10%of the grade]
  – TheprogrammeusestheVectorclass(developedduringlecturesandlabsessions)toposition each sprite on the canvas. 
  – Someofthegamespritesaresubjecttoavelocityvectorandmoveaccordinglyonthecanvas.
  
2.5 Collisions[15%of the grade] 
  – Thegameincludescollisionsbetweenthespritecontrolledbytheplayerandothersprites(e.g., to check if a projectile hits a target). 
  – The collisions are handled using the techniques described in the lectures.
2.6 Object
  -orientedapproach [15%of the grade] – The program follows an object-oriented approach.
  – The sprite controlled by the player should be wrapped inside aPlayerclass. 
  – Other game sprites should be wrapped inside appropriate classes. 
  – The collisions between the sprite controlled by the player and other sprites should be wrapped inside anInteractionclass. 
  – The main aspects of the game (state variables, or constants for canvas dimensions, images, etc.) should be wrapped inside aGameclass. This class can also encapsulate the game loop.
  
3 Additionalfeatures (40%) 
To qualify for the other 40% of the credit, your game must support additional features such as those included in the list below. The amount of credit to be granted will be determined by the course staff based on the perceived effort invested into implementing these features. 
  – Animated backgrounds or other interesting animation effects (explosions, etc). 
  – Two-player cooperative or competitive game. 
  – Sprites not controlled by the player colliding between them, following physics principles. 
  – Some of the sprites move with acceleration. 
  – Interesting story lines (e.g., multiple levels of increased difficulties). 
  – Pursue and evade effects (e.g., sprites that “gravitate” towards or chase the player). 
  – Other nontrivial features that enhance the gaming experience.
